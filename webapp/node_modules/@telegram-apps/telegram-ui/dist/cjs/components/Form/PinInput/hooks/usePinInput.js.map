{"version":3,"sources":["../../../../../../src/components/Form/PinInput/hooks/usePinInput.ts"],"sourcesContent":["'use client';\n\nimport { useCallback, useRef } from 'react';\n\nimport { Keys } from 'helpers/accessibility';\nimport { clamp } from 'helpers/math';\nimport { useCustomEnsuredControl } from 'hooks/useEnsureControl';\n\nexport enum BiometricType {\n  FACEID = 'faceid',\n  FINGERPRINT = 'fingerprint',\n}\n\ninterface UsePinInputProps {\n  pinCount: number;\n  value?: number[];\n  onChange?(value: number[]): void;\n  onBiometricAuth?(): void;\n  biometricType?: BiometricType;\n}\n\nconst BIOMETRIC_AUTH_BUTTON_VALUE = 'BiometricAuth';\nexport const DEFAULT_PINS = [1, 2, 3, 4, 5, 6, 7, 8, 9, BIOMETRIC_AUTH_BUTTON_VALUE, 0, Keys.BACKSPACE];\n\nexport const getAvailablePins = (biometricType?: BiometricType) => {\n  const pins = [...DEFAULT_PINS];\n\n  if (!biometricType) {\n    const biometricIndex = pins.indexOf(BIOMETRIC_AUTH_BUTTON_VALUE);\n    if (biometricIndex !== -1) {\n      pins.splice(biometricIndex, 1);\n    }\n  }\n\n  return pins;\n};\n\nexport const usePinInput = ({\n  pinCount,\n  value: valueProp = [],\n  onChange,\n  onBiometricAuth,\n  biometricType = undefined,\n}: UsePinInputProps) => {\n  const PINS = getAvailablePins(biometricType);\n  const inputRefs = useRef<HTMLLabelElement[]>([]).current;\n  const [value, setValue] = useCustomEnsuredControl({\n    defaultValue: valueProp,\n    onChange,\n  });\n\n  const focusByIndex = (index: number) => {\n    requestAnimationFrame(() => inputRefs[index]?.focus());\n  };\n\n  const setValueByIndex = (index: number, newValue: number) => {\n    setValue((prev) => {\n      const nextValue = [...prev];\n      nextValue[index] = newValue;\n      return nextValue;\n    });\n  };\n\n  const removeLastValue = (currentIndex: number) => {\n    setValue((prev) => prev.slice(0, -1));\n    focusByIndex(currentIndex - 1);\n  };\n\n  const handleClickValue = useCallback((enteredValue: number) => {\n    const lastIndex = clamp(value.length, 0, pinCount - 1);\n    setValueByIndex(lastIndex, enteredValue);\n    focusByIndex(lastIndex + 1);\n  }, [value, pinCount]);\n\n  const handleClickBackspace = useCallback(() => {\n    removeLastValue(value.length - 1);\n  }, [value]);\n\n  const handleBiometricAuth = useCallback(() => {\n    if (onBiometricAuth) {\n      onBiometricAuth();\n    }\n  }, [onBiometricAuth]);\n\n  const handleButton = useCallback((index: number, button: string) => {\n    const numButton = Number(button);\n    if (!Number.isNaN(numButton) && PINS.includes(numButton)) {\n      setValueByIndex(index, numButton);\n      focusByIndex(index + 1);\n    }\n\n    switch (button) {\n      case Keys.BACKSPACE:\n        removeLastValue(index);\n        break;\n\n      case Keys.ARROW_LEFT:\n        focusByIndex(index - 1);\n        break;\n\n      case Keys.ARROW_RIGHT:\n        focusByIndex(index + 1);\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n\n  const setInputRefByIndex = useCallback((index: number, ref: HTMLLabelElement | null) => {\n    if (!ref) {\n      return;\n    }\n\n    inputRefs[index] = ref;\n  }, []);\n\n  const onElementClick = useCallback((element: string | number) => {\n    if (element === Keys.BACKSPACE) {\n      handleClickBackspace();\n      return;\n    }\n\n    if (element === BIOMETRIC_AUTH_BUTTON_VALUE) {\n      handleBiometricAuth();\n      return;\n    }\n\n    handleClickValue(Number(element));\n  }, [handleClickValue, handleClickBackspace, handleBiometricAuth]);\n\n  return {\n    value,\n    setInputRefByIndex,\n    onElementClick,\n    handleButton,\n    PINS,\n  };\n};\n"],"names":["DEFAULT_PINS","getAvailablePins","usePinInput","BiometricType","BIOMETRIC_AUTH_BUTTON_VALUE","Keys","BACKSPACE","biometricType","pins","biometricIndex","indexOf","splice","pinCount","value","valueProp","onChange","onBiometricAuth","undefined","PINS","inputRefs","useRef","current","setValue","useCustomEnsuredControl","defaultValue","focusByIndex","index","requestAnimationFrame","focus","setValueByIndex","newValue","prev","nextValue","removeLastValue","currentIndex","slice","handleClickValue","useCallback","enteredValue","lastIndex","clamp","length","handleClickBackspace","handleBiometricAuth","handleButton","button","numButton","Number","isNaN","includes","ARROW_LEFT","ARROW_RIGHT","setInputRefByIndex","ref","onElementClick","element"],"mappings":"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"}