{"version":3,"sources":["../../../../../src/components/Form/PinInput/PinInput.tsx"],"sourcesContent":["import { forwardRef, HTMLAttributes } from 'react';\nimport styles from './PinInput.module.css';\n\nimport { Keys } from 'helpers/accessibility';\nimport { createChunks } from 'helpers/chunk';\nimport { classNames } from 'helpers/classNames';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Icon36Backspace } from 'icons/36/backspace';\nimport { Icon36FaceId } from 'icons/36/face_id';\nimport { Icon36FingerPrint } from 'icons/36/fingerprint';\nimport { Icon36ScanFace } from 'icons/36/scan_face';\n\nimport { PinInputButton } from 'components/Form/PinInput/components/PinInputButton/PinInputButton';\nimport { RootRenderer } from 'components/Service/RootRenderer/RootRenderer';\nimport { Headline } from 'components/Typography/Headline/Headline';\nimport { PinInputCell } from './components/PinInputCell/PinInputCell';\nimport { BiometricType, usePinInput } from './hooks/usePinInput';\n\nexport interface PinInputProps extends Omit<HTMLAttributes<HTMLElement>, 'onChange'> {\n  /** Text label displayed above the pin input cells. */\n  label?: string;\n  /** The number of pin input fields to display, with a minimum of 2. */\n  pinCount?: number;\n  /** The initial pin values to populate the input fields with. */\n  value?: number[];\n  /** Callback function triggered when the pin values change. */\n  onChange?: (value: number[]) => void;\n  /** Callback function triggered when the biometric authentication button is clicked. */\n  onBiometricAuth?: () => void;\n  /** Type of biometric authentication to display. If undefined, no biometric button will be shown. */\n  biometricType?: BiometricType;\n}\n\nconst PIN_MIN_COUNT = 2;\n\n/**\n * Renders a set of input fields for entering pin codes with a virtual keypad for value entry and deletion.\n */\nexport const PinInput = forwardRef<HTMLElement, PinInputProps>(({\n  label = 'Enter your pin',\n  pinCount = 4,\n  className,\n  value: valueProp = [],\n  onChange,\n  onBiometricAuth,\n  biometricType,\n  ...restProps\n}, ref) => {\n  const platform = usePlatform();\n  const normalizedPinCount = Math.max(PIN_MIN_COUNT, pinCount);\n\n  const {\n    setInputRefByIndex,\n    value,\n    handleButton,\n    onElementClick,\n    PINS,\n  } = usePinInput({\n    value: valueProp,\n    onChange,\n    onBiometricAuth,\n    biometricType,\n    pinCount: normalizedPinCount,\n  });\n\n  const getActionButtonComponent = (element: string | number, type?: BiometricType) => {\n    if (typeof element === 'number') {\n      return null;\n    }\n\n    if (element === Keys.BACKSPACE) {\n      return Icon36Backspace;\n    }\n\n    switch (type) {\n      case BiometricType.FACEID:\n        return platform === 'ios' ? Icon36FaceId : Icon36ScanFace;\n      case BiometricType.FINGERPRINT:\n        return Icon36FingerPrint;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <RootRenderer>\n      <section\n        ref={ref}\n        className={classNames(\n          styles.wrapper,\n          platform === 'ios' && styles['wrapper--ios'],\n          className,\n        )}\n        {...restProps}\n      >\n        <header className={styles.header}>\n          <Headline className={styles.title} weight=\"2\">{label}</Headline>\n          <div className={styles.cellsWrapper}>\n            {Array.from({ length: normalizedPinCount }).map((_, index) => (\n              <PinInputCell\n                /* We can't use useId here, because if pinCount changes in runtime, it will crash because amount of renders will be different */\n                /* eslint-disable-next-line react/no-array-index-key */\n                key={index}\n                ref={(labelRef) => setInputRefByIndex(index, labelRef)}\n                isTyped={index < value.length}\n                value={value[index] || ''}\n                onKeyDown={(event) => handleButton(index, event.key)}\n                autoFocus={index === 0}\n                tabIndex={-1}\n                readOnly\n              />\n            ))}\n          </div>\n        </header>\n        <div className={styles.buttonWrapper}>\n          {createChunks(PINS, 3).map((rows) => (\n            <div key={rows.toString()} className={classNames(\n              styles.row,\n              biometricType === undefined && styles['row--no-biometric'],\n            )}>\n              {rows.map((element) => {\n                // Only get action button component for backspace or biometric auth\n                const ActionButtonComponent = getActionButtonComponent(element, biometricType);\n\n                return (\n                  <PinInputButton\n                    key={String(element)}\n                    onClick={() => onElementClick(element)}\n                  >\n                    {ActionButtonComponent ? <ActionButtonComponent className={styles.actionButton} /> : element}\n                  </PinInputButton>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n      </section>\n    </RootRenderer>\n  );\n});\n"],"names":["PinInput","PIN_MIN_COUNT","forwardRef","ref","label","pinCount","className","value","valueProp","onChange","onBiometricAuth","biometricType","restProps","platform","usePlatform","normalizedPinCount","Math","max","setInputRefByIndex","handleButton","onElementClick","PINS","usePinInput","getActionButtonComponent","element","type","Keys","BACKSPACE","Icon36Backspace","BiometricType","FACEID","Icon36FaceId","Icon36ScanFace","FINGERPRINT","Icon36FingerPrint","RootRenderer","section","classNames","header","Headline","weight","div","Array","from","length","map","_","index","PinInputCell","labelRef","isTyped","onKeyDown","event","key","autoFocus","tabIndex","readOnly","createChunks","rows","undefined","ActionButtonComponent","PinInputButton","onClick","String","toString"],"mappings":";;;;+BAuCaA;;;eAAAA;;;;;;;uBAvC8B;+BAGtB;uBACQ;4BACF;6BACC;2BAEI;yBACH;6BACK;2BACH;gCAEA;8BACF;0BACJ;8BACI;6BACc;AAiB3C,MAAMC,gBAAgB;AAKf,MAAMD,yBAAWE,IAAAA,iBAAU,EAA6B,SAS5DC;QAT6D,EAC9DC,QAAQ,gBAAgB,EACxBC,WAAW,CAAC,EACZC,SAAS,EACTC,OAAOC,YAAY,EAAE,EACrBC,QAAQ,EACRC,eAAe,EACfC,aAAa,EAEd,WADIC;QAPHR;QACAC;QACAC;QACAC;QACAE;QACAC;QACAC;;IAGA,MAAME,WAAWC,IAAAA,wBAAW;IAC5B,MAAMC,qBAAqBC,KAAKC,GAAG,CAAChB,eAAeI;IAEnD,MAAM,EACJa,kBAAkB,EAClBX,KAAK,EACLY,YAAY,EACZC,cAAc,EACdC,IAAI,EACL,GAAGC,IAAAA,wBAAW,EAAC;QACdf,OAAOC;QACPC;QACAC;QACAC;QACAN,UAAUU;IACZ;IAEA,MAAMQ,2BAA2B,CAACC,SAA0BC;QAC1D,IAAI,OAAOD,YAAY,UAAU;YAC/B,OAAO;QACT;QAEA,IAAIA,YAAYE,mBAAI,CAACC,SAAS,EAAE;YAC9B,OAAOC,0BAAe;QACxB;QAEA,OAAQH;YACN,KAAKI,0BAAa,CAACC,MAAM;gBACvB,OAAOjB,aAAa,QAAQkB,qBAAY,GAAGC,yBAAc;YAC3D,KAAKH,0BAAa,CAACI,WAAW;gBAC5B,OAAOC,8BAAiB;YAC1B;gBACE,OAAO;QACX;IACF;IAEA,qBACE,qBAACC,0BAAY;kBACX,cAAA,sBAACC;YACCjC,KAAKA;YACLG,WAAW+B,IAAAA,sBAAU,2BAEnBxB,aAAa,kCACbP;WAEEM;;8BAEJ,sBAAC0B;oBAAOhC,SAAS;;sCACf,qBAACiC,kBAAQ;4BAACjC,SAAS;4BAAgBkC,QAAO;sCAAKpC;;sCAC/C,qBAACqC;4BAAInC,SAAS;sCACXoC,MAAMC,IAAI,CAAC;gCAAEC,QAAQ7B;4BAAmB,GAAG8B,GAAG,CAAC,CAACC,GAAGC,sBAClD,qBAACC,0BAAY;oCAIX7C,KAAK,CAAC8C,WAAa/B,mBAAmB6B,OAAOE;oCAC7CC,SAASH,QAAQxC,MAAMqC,MAAM;oCAC7BrC,OAAOA,KAAK,CAACwC,MAAM,IAAI;oCACvBI,WAAW,CAACC,QAAUjC,aAAa4B,OAAOK,MAAMC,GAAG;oCACnDC,WAAWP,UAAU;oCACrBQ,UAAU,CAAC;oCACXC,QAAQ;mCAPHT;;;;8BAYb,qBAACN;oBAAInC,SAAS;8BACXmD,IAAAA,mBAAY,EAACpC,MAAM,GAAGwB,GAAG,CAAC,CAACa,qBAC1B,qBAACjB;4BAA0BnC,WAAW+B,IAAAA,sBAAU,2BAE9C1B,kBAAkBgD;sCAEjBD,KAAKb,GAAG,CAAC,CAACrB;gCACT,mEAAmE;gCACnE,MAAMoC,wBAAwBrC,yBAAyBC,SAASb;gCAEhE,qBACE,qBAACkD,8BAAc;oCAEbC,SAAS,IAAM1C,eAAeI;8CAE7BoC,sCAAwB,qBAACA;wCAAsBtD,SAAS;yCAA4BkB;mCAHhFuC,OAAOvC;4BAMlB;2BAhBQkC,KAAKM,QAAQ;;;;;AAuBnC"}