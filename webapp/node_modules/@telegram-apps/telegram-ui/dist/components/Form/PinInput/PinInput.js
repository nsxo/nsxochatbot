import { _ as _object_spread } from "@swc/helpers/_/_object_spread";
import { _ as _object_spread_props } from "@swc/helpers/_/_object_spread_props";
import { _ as _object_without_properties } from "@swc/helpers/_/_object_without_properties";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from "react";
import { Keys } from "../../../helpers/accessibility";
import { createChunks } from "../../../helpers/chunk";
import { classNames } from "../../../helpers/classNames";
import { usePlatform } from "../../../hooks/usePlatform";
import { Icon36Backspace } from "../../../icons/36/backspace";
import { Icon36FaceId } from "../../../icons/36/face_id";
import { Icon36FingerPrint } from "../../../icons/36/fingerprint";
import { Icon36ScanFace } from "../../../icons/36/scan_face";
import { PinInputButton } from "./components/PinInputButton/PinInputButton";
import { RootRenderer } from "../../Service/RootRenderer/RootRenderer";
import { Headline } from "../../Typography/Headline/Headline";
import { PinInputCell } from "./components/PinInputCell/PinInputCell";
import { BiometricType, usePinInput } from "./hooks/usePinInput";
const PIN_MIN_COUNT = 2;
/**
 * Renders a set of input fields for entering pin codes with a virtual keypad for value entry and deletion.
 */ export const PinInput = /*#__PURE__*/ forwardRef((_param, ref)=>{
    var { label = 'Enter your pin', pinCount = 4, className, value: valueProp = [], onChange, onBiometricAuth, biometricType } = _param, restProps = _object_without_properties(_param, [
        "label",
        "pinCount",
        "className",
        "value",
        "onChange",
        "onBiometricAuth",
        "biometricType"
    ]);
    const platform = usePlatform();
    const normalizedPinCount = Math.max(PIN_MIN_COUNT, pinCount);
    const { setInputRefByIndex, value, handleButton, onElementClick, PINS } = usePinInput({
        value: valueProp,
        onChange,
        onBiometricAuth,
        biometricType,
        pinCount: normalizedPinCount
    });
    const getActionButtonComponent = (element, type)=>{
        if (typeof element === 'number') {
            return null;
        }
        if (element === Keys.BACKSPACE) {
            return Icon36Backspace;
        }
        switch(type){
            case BiometricType.FACEID:
                return platform === 'ios' ? Icon36FaceId : Icon36ScanFace;
            case BiometricType.FINGERPRINT:
                return Icon36FingerPrint;
            default:
                return null;
        }
    };
    return /*#__PURE__*/ _jsx(RootRenderer, {
        children: /*#__PURE__*/ _jsxs("section", _object_spread_props(_object_spread({
            ref: ref,
            className: classNames("tgui-a641ca1e63331268", platform === 'ios' && "tgui-bf64531d065e1bd9", className)
        }, restProps), {
            children: [
                /*#__PURE__*/ _jsxs("header", {
                    className: "tgui-a40b67b8ec9e3a49",
                    children: [
                        /*#__PURE__*/ _jsx(Headline, {
                            className: "tgui-7df9ee9d6d6586de",
                            weight: "2",
                            children: label
                        }),
                        /*#__PURE__*/ _jsx("div", {
                            className: "tgui-36c453f0a9d51371",
                            children: Array.from({
                                length: normalizedPinCount
                            }).map((_, index)=>/*#__PURE__*/ _jsx(PinInputCell, {
                                    ref: (labelRef)=>setInputRefByIndex(index, labelRef),
                                    isTyped: index < value.length,
                                    value: value[index] || '',
                                    onKeyDown: (event)=>handleButton(index, event.key),
                                    autoFocus: index === 0,
                                    tabIndex: -1,
                                    readOnly: true
                                }, index))
                        })
                    ]
                }),
                /*#__PURE__*/ _jsx("div", {
                    className: "tgui-0e77c7f1a1b82c84",
                    children: createChunks(PINS, 3).map((rows)=>/*#__PURE__*/ _jsx("div", {
                            className: classNames("tgui-49b69c407401f76c", biometricType === undefined && "tgui-fa5069ea6f3c02e4"),
                            children: rows.map((element)=>{
                                // Only get action button component for backspace or biometric auth
                                const ActionButtonComponent = getActionButtonComponent(element, biometricType);
                                return /*#__PURE__*/ _jsx(PinInputButton, {
                                    onClick: ()=>onElementClick(element),
                                    children: ActionButtonComponent ? /*#__PURE__*/ _jsx(ActionButtonComponent, {
                                        className: "tgui-c793c3252df33bb0"
                                    }) : element
                                }, String(element));
                            })
                        }, rows.toString()))
                })
            ]
        }))
    });
});

//# sourceMappingURL=PinInput.js.map