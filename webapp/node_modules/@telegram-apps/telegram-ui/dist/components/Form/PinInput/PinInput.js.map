{"version":3,"sources":["../../../../src/components/Form/PinInput/PinInput.tsx"],"sourcesContent":["import { forwardRef, HTMLAttributes } from 'react';\nimport styles from './PinInput.module.css';\n\nimport { Keys } from 'helpers/accessibility';\nimport { createChunks } from 'helpers/chunk';\nimport { classNames } from 'helpers/classNames';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Icon36Backspace } from 'icons/36/backspace';\nimport { Icon36FaceId } from 'icons/36/face_id';\nimport { Icon36FingerPrint } from 'icons/36/fingerprint';\nimport { Icon36ScanFace } from 'icons/36/scan_face';\n\nimport { PinInputButton } from 'components/Form/PinInput/components/PinInputButton/PinInputButton';\nimport { RootRenderer } from 'components/Service/RootRenderer/RootRenderer';\nimport { Headline } from 'components/Typography/Headline/Headline';\nimport { PinInputCell } from './components/PinInputCell/PinInputCell';\nimport { BiometricType, usePinInput } from './hooks/usePinInput';\n\nexport interface PinInputProps extends Omit<HTMLAttributes<HTMLElement>, 'onChange'> {\n  /** Text label displayed above the pin input cells. */\n  label?: string;\n  /** The number of pin input fields to display, with a minimum of 2. */\n  pinCount?: number;\n  /** The initial pin values to populate the input fields with. */\n  value?: number[];\n  /** Callback function triggered when the pin values change. */\n  onChange?: (value: number[]) => void;\n  /** Callback function triggered when the biometric authentication button is clicked. */\n  onBiometricAuth?: () => void;\n  /** Type of biometric authentication to display. If undefined, no biometric button will be shown. */\n  biometricType?: BiometricType;\n}\n\nconst PIN_MIN_COUNT = 2;\n\n/**\n * Renders a set of input fields for entering pin codes with a virtual keypad for value entry and deletion.\n */\nexport const PinInput = forwardRef<HTMLElement, PinInputProps>(({\n  label = 'Enter your pin',\n  pinCount = 4,\n  className,\n  value: valueProp = [],\n  onChange,\n  onBiometricAuth,\n  biometricType,\n  ...restProps\n}, ref) => {\n  const platform = usePlatform();\n  const normalizedPinCount = Math.max(PIN_MIN_COUNT, pinCount);\n\n  const {\n    setInputRefByIndex,\n    value,\n    handleButton,\n    onElementClick,\n    PINS,\n  } = usePinInput({\n    value: valueProp,\n    onChange,\n    onBiometricAuth,\n    biometricType,\n    pinCount: normalizedPinCount,\n  });\n\n  const getActionButtonComponent = (element: string | number, type?: BiometricType) => {\n    if (typeof element === 'number') {\n      return null;\n    }\n\n    if (element === Keys.BACKSPACE) {\n      return Icon36Backspace;\n    }\n\n    switch (type) {\n      case BiometricType.FACEID:\n        return platform === 'ios' ? Icon36FaceId : Icon36ScanFace;\n      case BiometricType.FINGERPRINT:\n        return Icon36FingerPrint;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <RootRenderer>\n      <section\n        ref={ref}\n        className={classNames(\n          styles.wrapper,\n          platform === 'ios' && styles['wrapper--ios'],\n          className,\n        )}\n        {...restProps}\n      >\n        <header className={styles.header}>\n          <Headline className={styles.title} weight=\"2\">{label}</Headline>\n          <div className={styles.cellsWrapper}>\n            {Array.from({ length: normalizedPinCount }).map((_, index) => (\n              <PinInputCell\n                /* We can't use useId here, because if pinCount changes in runtime, it will crash because amount of renders will be different */\n                /* eslint-disable-next-line react/no-array-index-key */\n                key={index}\n                ref={(labelRef) => setInputRefByIndex(index, labelRef)}\n                isTyped={index < value.length}\n                value={value[index] || ''}\n                onKeyDown={(event) => handleButton(index, event.key)}\n                autoFocus={index === 0}\n                tabIndex={-1}\n                readOnly\n              />\n            ))}\n          </div>\n        </header>\n        <div className={styles.buttonWrapper}>\n          {createChunks(PINS, 3).map((rows) => (\n            <div key={rows.toString()} className={classNames(\n              styles.row,\n              biometricType === undefined && styles['row--no-biometric'],\n            )}>\n              {rows.map((element) => {\n                // Only get action button component for backspace or biometric auth\n                const ActionButtonComponent = getActionButtonComponent(element, biometricType);\n\n                return (\n                  <PinInputButton\n                    key={String(element)}\n                    onClick={() => onElementClick(element)}\n                  >\n                    {ActionButtonComponent ? <ActionButtonComponent className={styles.actionButton} /> : element}\n                  </PinInputButton>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n      </section>\n    </RootRenderer>\n  );\n});\n"],"names":["forwardRef","Keys","createChunks","classNames","usePlatform","Icon36Backspace","Icon36FaceId","Icon36FingerPrint","Icon36ScanFace","PinInputButton","RootRenderer","Headline","PinInputCell","BiometricType","usePinInput","PIN_MIN_COUNT","PinInput","ref","label","pinCount","className","value","valueProp","onChange","onBiometricAuth","biometricType","restProps","platform","normalizedPinCount","Math","max","setInputRefByIndex","handleButton","onElementClick","PINS","getActionButtonComponent","element","type","BACKSPACE","FACEID","FINGERPRINT","section","header","weight","div","Array","from","length","map","_","index","labelRef","isTyped","onKeyDown","event","key","autoFocus","tabIndex","readOnly","rows","undefined","ActionButtonComponent","onClick","String","toString"],"mappings":";;;;AAAA,SAASA,UAAU,QAAwB,QAAQ;AAGnD,SAASC,IAAI,QAAQ,iCAAwB;AAC7C,SAASC,YAAY,QAAQ,yBAAgB;AAC7C,SAASC,UAAU,QAAQ,8BAAqB;AAChD,SAASC,WAAW,QAAQ,6BAAoB;AAEhD,SAASC,eAAe,QAAQ,8BAAqB;AACrD,SAASC,YAAY,QAAQ,4BAAmB;AAChD,SAASC,iBAAiB,QAAQ,gCAAuB;AACzD,SAASC,cAAc,QAAQ,8BAAqB;AAEpD,SAASC,cAAc,QAAQ,6CAAoE;AACnG,SAASC,YAAY,QAAQ,0CAA+C;AAC5E,SAASC,QAAQ,QAAQ,qCAA0C;AACnE,SAASC,YAAY,QAAQ,yCAAyC;AACtE,SAASC,aAAa,EAAEC,WAAW,QAAQ,sBAAsB;AAiBjE,MAAMC,gBAAgB;AAEtB;;CAEC,GACD,OAAO,MAAMC,yBAAWhB,WAAuC,SAS5DiB;QAT6D,EAC9DC,QAAQ,gBAAgB,EACxBC,WAAW,CAAC,EACZC,SAAS,EACTC,OAAOC,YAAY,EAAE,EACrBC,QAAQ,EACRC,eAAe,EACfC,aAAa,EAEd,WADIC;QAPHR;QACAC;QACAC;QACAC;QACAE;QACAC;QACAC;;IAGA,MAAME,WAAWvB;IACjB,MAAMwB,qBAAqBC,KAAKC,GAAG,CAACf,eAAeI;IAEnD,MAAM,EACJY,kBAAkB,EAClBV,KAAK,EACLW,YAAY,EACZC,cAAc,EACdC,IAAI,EACL,GAAGpB,YAAY;QACdO,OAAOC;QACPC;QACAC;QACAC;QACAN,UAAUS;IACZ;IAEA,MAAMO,2BAA2B,CAACC,SAA0BC;QAC1D,IAAI,OAAOD,YAAY,UAAU;YAC/B,OAAO;QACT;QAEA,IAAIA,YAAYnC,KAAKqC,SAAS,EAAE;YAC9B,OAAOjC;QACT;QAEA,OAAQgC;YACN,KAAKxB,cAAc0B,MAAM;gBACvB,OAAOZ,aAAa,QAAQrB,eAAeE;YAC7C,KAAKK,cAAc2B,WAAW;gBAC5B,OAAOjC;YACT;gBACE,OAAO;QACX;IACF;IAEA,qBACE,KAACG;kBACC,cAAA,MAAC+B;YACCxB,KAAKA;YACLG,WAAWjB,oCAETwB,aAAa,kCACbP;WAEEM;;8BAEJ,MAACgB;oBAAOtB,SAAS;;sCACf,KAACT;4BAASS,SAAS;4BAAgBuB,QAAO;sCAAKzB;;sCAC/C,KAAC0B;4BAAIxB,SAAS;sCACXyB,MAAMC,IAAI,CAAC;gCAAEC,QAAQnB;4BAAmB,GAAGoB,GAAG,CAAC,CAACC,GAAGC,sBAClD,KAACtC;oCAICK,KAAK,CAACkC,WAAapB,mBAAmBmB,OAAOC;oCAC7CC,SAASF,QAAQ7B,MAAM0B,MAAM;oCAC7B1B,OAAOA,KAAK,CAAC6B,MAAM,IAAI;oCACvBG,WAAW,CAACC,QAAUtB,aAAakB,OAAOI,MAAMC,GAAG;oCACnDC,WAAWN,UAAU;oCACrBO,UAAU,CAAC;oCACXC,QAAQ;mCAPHR;;;;8BAYb,KAACN;oBAAIxB,SAAS;8BACXlB,aAAagC,MAAM,GAAGc,GAAG,CAAC,CAACW,qBAC1B,KAACf;4BAA0BxB,WAAWjB,oCAEpCsB,kBAAkBmC;sCAEjBD,KAAKX,GAAG,CAAC,CAACZ;gCACT,mEAAmE;gCACnE,MAAMyB,wBAAwB1B,yBAAyBC,SAASX;gCAEhE,qBACE,KAAChB;oCAECqD,SAAS,IAAM7B,eAAeG;8CAE7ByB,sCAAwB,KAACA;wCAAsBzC,SAAS;yCAA4BgB;mCAHhF2B,OAAO3B;4BAMlB;2BAhBQuB,KAAKK,QAAQ;;;;;AAuBnC,GAAG"}