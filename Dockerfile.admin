# Single-stage build for admin dashboard
FROM node:18-alpine

# Install Python and build dependencies
RUN apk add --no-cache python3 py3-pip gcc musl-dev python3-dev

# Set working directory
WORKDIR /app

# Copy package files first (for better caching)
COPY telegram_bot/admin_dashboard/package*.json ./admin_dashboard/
COPY telegram_bot/requirements.txt ./telegram_bot/
COPY telegram_bot/admin_dashboard/requirements.txt ./telegram_bot/admin_dashboard/

# Install Node.js dependencies
WORKDIR /app/admin_dashboard
RUN npm ci --only=production

# Copy admin dashboard source
COPY telegram_bot/admin_dashboard/ ./

# Build frontend with increased memory limit
RUN NODE_OPTIONS="--max-old-space-size=4096" npm run build

# Install Python dependencies
WORKDIR /app
RUN pip3 install --no-cache-dir -r telegram_bot/requirements.txt
RUN pip3 install --no-cache-dir -r telegram_bot/admin_dashboard/requirements.txt

# Copy application code
COPY telegram_bot/ ./telegram_bot/

# Create non-root user
RUN addgroup -g 1001 -S app && adduser -S app -u 1001 -G app
RUN chown -R app:app /app
USER app

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/health || exit 1

# Start command
CMD ["python3", "telegram_bot/admin_dashboard/start_server.py"] 