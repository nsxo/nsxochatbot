#!/usr/bin/env python3
"""
Setup script for Railway Deployment Monitor
Helps configure credentials and test the monitoring system.
"""

import os
import sys
import json
import requests
from pathlib import Path

def get_railway_credentials():
    """Guide user through getting Railway API credentials."""
    print("🚂 Railway API Setup")
    print("=" * 50)
    print()
    print("To monitor your Railway deployments, you need:")
    print("1. Railway API Token")
    print("2. Project ID")
    print("3. Service ID")
    print()
    
    print("📋 Step 1: Get your Railway API Token")
    print("1. Go to https://railway.app/account/tokens")
    print("2. Click 'Create Token'")
    print("3. Copy the token")
    print()
    
    railway_token = input("Enter your Railway API Token: ").strip()
    
    if not railway_token:
        print("❌ Railway token is required!")
        return None
    
    print()
    print("📋 Step 2: Get your Project and Service IDs")
    print("1. Go to your Railway project dashboard")
    print("2. Look at the URL: https://railway.app/project/PROJECT_ID")
    print("3. Click on your service")
    print("4. Look at the URL: https://railway.app/project/PROJECT_ID/service/SERVICE_ID")
    print()
    
    project_id = input("Enter your Railway Project ID: ").strip()
    service_id = input("Enter your Railway Service ID: ").strip()
    
    if not project_id or not service_id:
        print("❌ Project ID and Service ID are required!")
        return None
    
    return {
        'RAILWAY_TOKEN': railway_token,
        'RAILWAY_PROJECT_ID': project_id,
        'RAILWAY_SERVICE_ID': service_id
    }

def test_railway_connection(credentials):
    """Test the Railway API connection."""
    print("\n🧪 Testing Railway API connection...")
    
    headers = {
        "Authorization": f"Bearer {credentials['RAILWAY_TOKEN']}",
        "Content-Type": "application/json"
    }
    
    query = """
    query GetService($serviceId: String!) {
        service(id: $serviceId) {
            id
            name
            latestDeployment {
                status
                createdAt
            }
        }
    }
    """
    
    variables = {"serviceId": credentials['RAILWAY_SERVICE_ID']}
    
    try:
        response = requests.post(
            "https://backboard.railway.app/graphql",
            json={"query": query, "variables": variables},
            headers=headers,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            if 'data' in data and 'service' in data['data'] and data['data']['service']:
                service = data['data']['service']
                print("✅ Railway API connection successful!")
                print(f"📋 Service: {service['name']}")
                
                if service.get('latestDeployment'):
                    deployment = service['latestDeployment']
                    print(f"🚀 Latest deployment: {deployment['status']}")
                    print(f"📅 Created: {deployment['createdAt']}")
                
                return True
            else:
                print("❌ Service not found. Check your Service ID.")
                return False
        else:
            print(f"❌ API request failed: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"❌ Connection test failed: {e}")
        return False

def save_credentials(credentials):
    """Save credentials to environment file."""
    env_file = Path(".env")
    
    # Read existing .env if it exists
    existing_vars = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_vars[key] = value
    
    # Update with new credentials
    existing_vars.update(credentials)
    
    # Write back to .env
    with open(env_file, 'w') as f:
        f.write("# Railway Deployment Monitor Configuration\n")
        f.write("# Generated by setup_railway_monitor.py\n\n")
        
        for key, value in existing_vars.items():
            f.write(f"{key}={value}\n")
    
    print(f"✅ Credentials saved to {env_file}")

def setup_github_secrets():
    """Guide user through setting up GitHub secrets."""
    print("\n🔑 GitHub Secrets Setup")
    print("=" * 50)
    print()
    print("To enable automated monitoring, add these secrets to your GitHub repository:")
    print()
    print("1. Go to your GitHub repository")
    print("2. Click Settings → Secrets and variables → Actions")
    print("3. Click 'New repository secret' for each:")
    print()
    print("Required secrets:")
    print("• RAILWAY_TOKEN")
    print("• RAILWAY_PROJECT_ID") 
    print("• RAILWAY_SERVICE_ID")
    print()
    print("The values are the same ones you just entered.")
    print()
    
    input("Press Enter when you've added the GitHub secrets...")

def create_monitor_config():
    """Create monitoring configuration file."""
    config = {
        "monitoring": {
            "enabled": True,
            "check_interval_minutes": 15,
            "deployment_timeout_minutes": 10,
            "auto_fix_enabled": True
        },
        "notifications": {
            "github_issues": True,
            "log_retention_days": 30
        },
        "fixes": {
            "css_build_errors": True,
            "memory_errors": True,
            "dependency_errors": True,
            "python_import_errors": True,
            "port_binding_errors": True
        }
    }
    
    config_file = Path("telegram_bot/scripts/monitor_config.json")
    with open(config_file, 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"✅ Configuration saved to {config_file}")

def run_test_monitor():
    """Run a test of the monitoring system."""
    print("\n🧪 Running test monitoring cycle...")
    
    try:
        # Import and run the monitor
        sys.path.insert(0, str(Path(__file__).parent))
        from railway_monitor import RailwayMonitor
        
        monitor = RailwayMonitor()
        
        # Test getting deployment status
        status = monitor.get_deployment_status()
        if status:
            print("✅ Successfully connected to Railway API")
            deployment = status.get('latestDeployment', {})
            print(f"📊 Current deployment status: {deployment.get('status', 'Unknown')}")
        else:
            print("❌ Failed to get deployment status")
            return False
        
        # Test getting logs
        logs = monitor.get_deployment_logs(limit=10)
        if logs:
            print(f"✅ Successfully retrieved {len(logs)} log entries")
            if logs:
                print("📄 Sample log entry:")
                print(f"   {logs[0][:100]}...")
        else:
            print("⚠️ No logs available or failed to retrieve logs")
        
        return True
        
    except Exception as e:
        print(f"❌ Test failed: {e}")
        return False

def main():
    """Main setup function."""
    print("🤖 Railway Deployment Monitor Setup")
    print("=" * 50)
    print()
    print("This script will help you set up automated monitoring and fixing")
    print("of your Railway deployments.")
    print()
    
    # Get Railway credentials
    credentials = get_railway_credentials()
    if not credentials:
        print("❌ Setup failed - missing credentials")
        return False
    
    # Test connection
    if not test_railway_connection(credentials):
        print("❌ Setup failed - connection test failed")
        return False
    
    # Save credentials
    save_credentials(credentials)
    
    # Set environment variables for testing
    for key, value in credentials.items():
        os.environ[key] = value
    
    # Create config
    create_monitor_config()
    
    # Test the monitor
    if run_test_monitor():
        print("\n✅ Railway Monitor setup completed successfully!")
        print()
        print("📋 Next steps:")
        print("1. Set up GitHub secrets for automated monitoring")
        print("2. Push this commit to trigger the GitHub Action")
        print("3. Monitor will automatically check deployments every 15 minutes")
        print()
        
        setup_github_secrets()
        
        print("\n🎉 Setup complete! Your deployments will now be automatically monitored.")
        return True
    else:
        print("\n❌ Setup completed but testing failed.")
        print("Check your credentials and try running the monitor manually.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 